<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_generic_type_wrapper_8cpp" kind="file" language="C++">
    <compoundname>GenericTypeWrapper.cpp</compoundname>
    <includes refid="_generic_type_wrapper_8h" local="yes">GenericTypeWrapper.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>GenericTypeWrapper.cpp</label>
        <link refid="_generic_type_wrapper_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>GenericTypeWrapper.h</label>
        <link refid="_generic_type_wrapper_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1afa581a6e7a6c7725f6a5855724969c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for equality (==). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true equal. </para>
</simplesect>
<simplesect kind="return"><para>false not equal. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="50" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="50" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a661ac8759199a26648d57dd28d7e84e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for less than (&lt;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true less than. </para>
</simplesect>
<simplesect kind="return"><para>false not less than. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="66" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="66" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a9b37ee7c15461448152f68efaf57b3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for greater than (&gt;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true greater than. </para>
</simplesect>
<simplesect kind="return"><para>false not greater than. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="82" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a82a7bcc3d50be4b883aba0d1b431a8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for less than or equal to (&lt;=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true less than or equal to. </para>
</simplesect>
<simplesect kind="return"><para>false not less than or equal to. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="98" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ad9ca42e991d26f6513f365df8c014e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for greater than or equal to (&gt;=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true greater than or equal to. </para>
</simplesect>
<simplesect kind="return"><para>false not greater than or equal to. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="102" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a803b6c61724eb967787055758dc3ed18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for inequality (!=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true not equal. </para>
</simplesect>
<simplesect kind="return"><para>false equal. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="106" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a41be8cd0008560c07cbcb591b33be0ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, const Generic &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="110" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="110" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1aec1e40205e68b2beccbb567a0a30bda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="128" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ab4824d6e68217ed8b727b945aa427320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="132" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a871b2c2a890c0715d0115f3f16b536bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="136" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a78291e9ac99aabed0bd2674be62caef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="140" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1addd2ee63270b1d08432fc2fc52cbfd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="144" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a79d5508ec580557e03cda3f66696825c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="148" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1aaa0463a11f5cf24b5c02a892bbcb6536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, const Integer &amp;integer)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="152" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1aff925eead57a2c82548e7a09fafd20aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="163" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a499736fa4c7532402e23a7f85232284c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="167" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a3bac01deccee75994c221d14f8b844ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="171" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a72cdce5fedda04d9d3c64c331adc9e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="175" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a9b9070fc270047eb43728721d2b86ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="179" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ae93b6c48a46e1b71a1bb25c3624bba5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="183" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ab5409f2681d4589ff2c12c0f2de037ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, const Double &amp;doub)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>doub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="187" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a483931724196c580552b68751fb4d837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="198" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a5158a142e0966685ec7fb4e147b24ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="202" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ac96278a8cbe282632b11f0c8c007df0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="206" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a3bfb9217788a9978499b8d5696bb0ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="210" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ac1c1bb5dcf02aad3b2c0a1bf74a11cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="214" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a112689eec28e0ca9489e8c4ec6a34493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="218" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ab1130e9c9d5305db07f1aaef23057d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, const String &amp;str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="222" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a2b7d3915427efbf4015865e7b7835cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Bool &amp;left, const Bool &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="233" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1ac793dffdcd43e058ad2728229dac45f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Bool &amp;left, const Bool &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="237" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8cpp_1a8cee5a17a854c5b4e342d5c709557c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out, const Bool &amp;boolean)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>boolean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.cpp" line="241" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="241" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of <ref refid="_generic_type_wrapper_8h" kindref="compound">GenericTypeWrapper.h</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>John Nguyen (<ulink url="mailto:jvn1567@gmail.com">jvn1567@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="author"><para>Joshua Goldberg (<ulink url="mailto:joshgoldbergcode@gmail.com">joshgoldbergcode@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2021-09-28</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="GenericTypeWrapper.cpp"/>
  </compounddef>
</doxygen>
