<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_generic" kind="struct" language="C++" prot="public">
    <compoundname>Generic</compoundname>
    <derivedcompoundref refid="struct_bool" prot="public" virt="non-virtual">Bool</derivedcompoundref>
    <derivedcompoundref refid="struct_double" prot="public" virt="non-virtual">Double</derivedcompoundref>
    <derivedcompoundref refid="struct_integer" prot="public" virt="non-virtual">Integer</derivedcompoundref>
    <derivedcompoundref refid="struct_string" prot="public" virt="non-virtual">String</derivedcompoundref>
    <includes refid="_generic_type_wrapper_8h" local="no">GenericTypeWrapper.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_generic_1a735fcd5f7193736a5e321eeeefb7eb59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>GenericType</type>
        <definition>GenericType Generic::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <reimplementedby refid="struct_integer_1a868945faefaa37692da065d02585cae6">type</reimplementedby>
        <reimplementedby refid="struct_double_1a3bf094fb4d0941f3966d41f393c4aef5">type</reimplementedby>
        <reimplementedby refid="struct_string_1a1aba2f66bacafada09e74dfaeae5397a">type</reimplementedby>
        <reimplementedby refid="struct_bool_1a9d69db86312f7c6c63d0e6f461d5c821">type</reimplementedby>
        <briefdescription>
<para>Returns the type the generic is storing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>enum STRING, DOUBLE, INTEGER, BOOL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="41" column="25" bodyfile="GenericTypeWrapper.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_1ab080c422cfac7c3cd57937ad0b75aa82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Generic::getDouble</definition>
        <argsstring>() const</argsstring>
        <name>getDouble</name>
        <briefdescription>
<para>Get double from <ref refid="struct_generic" kindref="compound">Generic</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double the double stored. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if data cannot be converted to double. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="56" column="12" bodyfile="GenericTypeWrapper.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_1a97ec591929d0dee34a65345dfb6d68ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string Generic::getString</definition>
        <argsstring>() const</argsstring>
        <name>getString</name>
        <briefdescription>
<para>Get string from <ref refid="struct_generic" kindref="compound">Generic</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string the string stored. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if data cannot be converted to string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="63" column="17" bodyfile="GenericTypeWrapper.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_generic_1af2c54ecb33c1d8a080ab0e0749787244" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
        <definition>Generic * Generic::wrapPrimitive</definition>
        <argsstring>(std::string data)</argsstring>
        <name>wrapPrimitive</name>
        <param>
          <type>std::string</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Parses string data and subsequently constructs a sub-class instance on the heap of the parsed type (string, double, integer, bool). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data, as a string, to be parsed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Generic* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="49" column="20" bodyfile="GenericTypeWrapper.cpp" bodystart="22" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="struct_generic" kindref="compound">Generic</ref> is used to capture type string and the following primitives: double, integer, bool. Once captured, it has methods to convert to the appropriate type. Currently only <ref refid="struct_generic_1ab080c422cfac7c3cd57937ad0b75aa82" kindref="member">getDouble()</ref> and <ref refid="struct_generic_1a97ec591929d0dee34a65345dfb6d68ca" kindref="member">getString()</ref> are implemented. <ref refid="struct_generic" kindref="compound">Generic</ref> is not instantiable and is used for polymorphic behaviors. Only sub-classes can be constructed. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>String</label>
        <link refid="struct_string"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Double</label>
        <link refid="struct_double"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Integer</label>
        <link refid="struct_integer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Generic</label>
        <link refid="struct_generic"/>
      </node>
      <node id="2">
        <label>Bool</label>
        <link refid="struct_bool"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="GenericTypeWrapper.h" line="35" column="1" bodyfile="GenericTypeWrapper.h" bodystart="35" bodyend="64"/>
    <listofallmembers>
      <member refid="struct_generic_1ab080c422cfac7c3cd57937ad0b75aa82" prot="public" virt="non-virtual"><scope>Generic</scope><name>getDouble</name></member>
      <member refid="struct_generic_1a97ec591929d0dee34a65345dfb6d68ca" prot="public" virt="non-virtual"><scope>Generic</scope><name>getString</name></member>
      <member refid="struct_generic_1a735fcd5f7193736a5e321eeeefb7eb59" prot="public" virt="virtual"><scope>Generic</scope><name>type</name></member>
      <member refid="struct_generic_1af2c54ecb33c1d8a080ab0e0749787244" prot="public" virt="non-virtual"><scope>Generic</scope><name>wrapPrimitive</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
