<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_generic_type_wrapper_8h" kind="file" language="C++">
    <compoundname>GenericTypeWrapper.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <includedby refid="_data_frame_8h" local="yes">DataFrame.h</includedby>
    <includedby refid="_decision_node_8h" local="yes">DecisionNode.h</includedby>
    <includedby refid="_decision_tree_base_8h" local="yes">DecisionTreeBase.h</includedby>
    <includedby refid="_generic_type_wrapper_8cpp" local="yes">GenericTypeWrapper.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>GenericTypeWrapper.h</label>
        <link refid="_generic_type_wrapper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>GenericTypeWrapper.cpp</label>
        <link refid="_generic_type_wrapper_8cpp"/>
      </node>
      <node id="4">
        <label>DecisionTreeBase.h</label>
        <link refid="_decision_tree_base_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>DataFrame.h</label>
        <link refid="_data_frame_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>DecisionNode.cpp</label>
        <link refid="_decision_node_8cpp"/>
      </node>
      <node id="1">
        <label>GenericTypeWrapper.h</label>
        <link refid="_generic_type_wrapper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>DataFrame.cpp</label>
        <link refid="_data_frame_8cpp"/>
      </node>
      <node id="5">
        <label>DecisionTreeClassifier.h</label>
        <link refid="_decision_tree_classifier_8h_source"/>
      </node>
      <node id="6">
        <label>DecisionNode.h</label>
        <link refid="_decision_node_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_generic" prot="public">Generic</innerclass>
    <innerclass refid="struct_integer" prot="public">Integer</innerclass>
    <innerclass refid="struct_double" prot="public">Double</innerclass>
    <innerclass refid="struct_string" prot="public">String</innerclass>
    <innerclass refid="struct_bool" prot="public">Bool</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0" prot="public" static="no" strong="no">
        <type></type>
        <name>GenericType</name>
        <enumvalue id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0a9e022e6380da28dd73210ed34b137c36" prot="public">
          <name>GENERIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0a5a063e265d2ac903b6808e9f6e73ec46" prot="public">
          <name>INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0a33465d1d419b1074fb259ef444609e92" prot="public">
          <name>DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0aee847e634a4297b274316de8a8ca9921" prot="public">
          <name>STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_generic_type_wrapper_8h_1a5b49a4735004213d537a8915a2ac69a0ae663dbb8f8244e122acb5bd6b2c216e1" prot="public">
          <name>BOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="21" column="1" bodyfile="GenericTypeWrapper.h" bodystart="21" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_generic_type_wrapper_8h_1a25af157bdd5a482306b0f79009c56f96" prot="public" static="yes" mutable="no">
        <type>const std::vector&lt; std::string &gt;</type>
        <definition>const std::vector&lt;std::string&gt; GenericTypeName</definition>
        <argsstring></argsstring>
        <name>GenericTypeName</name>
        <initializer>= {
    &quot;GENERIC&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot;, &quot;STRING&quot;, &quot;BOOL&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="23" column="26" bodyfile="GenericTypeWrapper.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_generic_type_wrapper_8h_1afa581a6e7a6c7725f6a5855724969c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for equality (==). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true equal. </para>
</simplesect>
<simplesect kind="return"><para>false not equal. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="76" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="50" bodyend="64" declfile="GenericTypeWrapper.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a661ac8759199a26648d57dd28d7e84e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for less than (&lt;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true less than. </para>
</simplesect>
<simplesect kind="return"><para>false not less than. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="88" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="66" bodyend="80" declfile="GenericTypeWrapper.h" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a9b37ee7c15461448152f68efaf57b3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for greater than (&gt;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true greater than. </para>
</simplesect>
<simplesect kind="return"><para>false not greater than. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="100" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="82" bodyend="96" declfile="GenericTypeWrapper.h" declline="100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a82a7bcc3d50be4b883aba0d1b431a8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for less than or equal to (&lt;=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true less than or equal to. </para>
</simplesect>
<simplesect kind="return"><para>false not less than or equal to. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="112" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="98" bodyend="100" declfile="GenericTypeWrapper.h" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ad9ca42e991d26f6513f365df8c014e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for greater than or equal to (&gt;=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true greater than or equal to. </para>
</simplesect>
<simplesect kind="return"><para>false not greater than or equal to. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="124" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="102" bodyend="104" declfile="GenericTypeWrapper.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a803b6c61724eb967787055758dc3ed18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Generic &amp;left, const Generic &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Compares two Generics for inequality (!=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true not equal. </para>
</simplesect>
<simplesect kind="return"><para>false equal. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the generics are not the same type, they cannot be compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="136" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="106" bodyend="108" declfile="GenericTypeWrapper.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ae7867c5e03338a9131469a3a7d1764e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Generic &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_generic" kindref="compound">Generic</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
<para>Overrides the output (&lt;&lt;) operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generic</parametername>
</parameternamelist>
<parameterdescription>
<para>the generic to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ostream&amp; the output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="145" column="1" declfile="GenericTypeWrapper.h" declline="145" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1aec1e40205e68b2beccbb567a0a30bda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="166" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="128" bodyend="130" declfile="GenericTypeWrapper.h" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ab4824d6e68217ed8b727b945aa427320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="167" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="132" bodyend="134" declfile="GenericTypeWrapper.h" declline="167" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a871b2c2a890c0715d0115f3f16b536bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="168" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="136" bodyend="138" declfile="GenericTypeWrapper.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a78291e9ac99aabed0bd2674be62caef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="169" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="140" bodyend="142" declfile="GenericTypeWrapper.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1addd2ee63270b1d08432fc2fc52cbfd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="170" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="144" bodyend="146" declfile="GenericTypeWrapper.h" declline="170" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a79d5508ec580557e03cda3f66696825c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Integer &amp;left, const Integer &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="171" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="148" bodyend="150" declfile="GenericTypeWrapper.h" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a821e60635d70a06e8b9cc27ed0e7bfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Integer &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_integer" kindref="compound">Integer</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="172" column="1" declfile="GenericTypeWrapper.h" declline="172" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1aff925eead57a2c82548e7a09fafd20aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="193" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="163" bodyend="165" declfile="GenericTypeWrapper.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a499736fa4c7532402e23a7f85232284c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="194" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="167" bodyend="169" declfile="GenericTypeWrapper.h" declline="194" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a3bac01deccee75994c221d14f8b844ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="195" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="171" bodyend="173" declfile="GenericTypeWrapper.h" declline="195" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a72cdce5fedda04d9d3c64c331adc9e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="196" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="175" bodyend="177" declfile="GenericTypeWrapper.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a9b9070fc270047eb43728721d2b86ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="197" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="179" bodyend="181" declfile="GenericTypeWrapper.h" declline="197" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ae93b6c48a46e1b71a1bb25c3624bba5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Double &amp;left, const Double &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="198" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="183" bodyend="185" declfile="GenericTypeWrapper.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ac28e96cfa34348e5b243f4b52be268c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Double &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_double" kindref="compound">Double</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="199" column="1" declfile="GenericTypeWrapper.h" declline="199" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a483931724196c580552b68751fb4d837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="220" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="198" bodyend="200" declfile="GenericTypeWrapper.h" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a5158a142e0966685ec7fb4e147b24ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="221" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="202" bodyend="204" declfile="GenericTypeWrapper.h" declline="221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ac96278a8cbe282632b11f0c8c007df0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="222" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="206" bodyend="208" declfile="GenericTypeWrapper.h" declline="222" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a3bfb9217788a9978499b8d5696bb0ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="223" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="210" bodyend="212" declfile="GenericTypeWrapper.h" declline="223" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ac1c1bb5dcf02aad3b2c0a1bf74a11cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="224" column="1" bodyfile="GenericTypeWrapper.cpp" bodystart="214" bodyend="216" declfile="GenericTypeWrapper.h" declline="224" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a112689eec28e0ca9489e8c4ec6a34493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const String &amp;left, const String &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="225" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="218" bodyend="220" declfile="GenericTypeWrapper.h" declline="225" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a5268330ed1a7d700e901e4a1e5bfcfcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const String &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_string" kindref="compound">String</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="226" column="1" declfile="GenericTypeWrapper.h" declline="226" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a2b7d3915427efbf4015865e7b7835cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Bool &amp;left, const Bool &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="247" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="233" bodyend="235" declfile="GenericTypeWrapper.h" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1ac793dffdcd43e058ad2728229dac45f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Bool &amp;left, const Bool &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="248" column="6" bodyfile="GenericTypeWrapper.cpp" bodystart="237" bodyend="239" declfile="GenericTypeWrapper.h" declline="248" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_generic_type_wrapper_8h_1a8c3e75e48c00157b2b2640e7bc2975dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Bool &amp;generic)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_bool" kindref="compound">Bool</ref> &amp;</type>
          <declname>generic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GenericTypeWrapper.h" line="249" column="1" declfile="GenericTypeWrapper.h" declline="249" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper classes for type string and the following primitives: double, integer, bool. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>John Nguyen (<ulink url="mailto:jvn1567@gmail.com">jvn1567@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="author"><para>Joshua Goldberg (<ulink url="mailto:joshgoldbergcode@gmail.com">joshgoldbergcode@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2021-09-28</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="GenericTypeWrapper.h"/>
  </compounddef>
</doxygen>
