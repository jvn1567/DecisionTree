<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_data_frame" kind="class" language="C++" prot="public">
    <compoundname>DataFrame</compoundname>
    <includes refid="_data_frame_8h" local="no">DataFrame.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_data_frame_1ab12a5cbcd9cb0fc2d9b1de9eb5bc56a5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt; &gt; *</type>
        <definition>std::vector&lt;std::vector&lt;Generic*&gt; &gt;* DataFrame::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="30" column="17" bodyfile="DataFrame.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_data_frame_1aca57cc5b8e9f83e4bc6b1ae7deede52c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; DataFrame::colNames</definition>
        <argsstring></argsstring>
        <name>colNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="31" column="17" bodyfile="DataFrame.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_data_frame_1a50c5d1113c6a901c3c7cbb5b2f1cd910" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt; &gt; *</type>
        <definition>vector&lt; vector&lt; Generic * &gt; &gt; * DataFrame::sortMerge</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Generic * &gt;&gt; *half1, std::vector&lt; std::vector&lt; Generic * &gt;&gt; *half2, int sortIndex)</argsstring>
        <name>sortMerge</name>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;&gt; *</type>
          <declname>half1</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;&gt; *</type>
          <declname>half2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sortIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merges two 2D vectors into a sorted vector containing all the values in the original two vectors. Used for merge sorting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="36" column="17" bodyfile="DataFrame.cpp" bodystart="67" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a51d102ded3fb1cfbe9167d757c519252" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt; &gt; *</type>
        <definition>vector&lt; vector&lt; Generic * &gt; &gt; * DataFrame::sortSplit</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Generic * &gt;&gt; *data, int sortIndex)</argsstring>
        <name>sortSplit</name>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;&gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sortIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a merge sort on the passed in 2D vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="44" column="17" bodyfile="DataFrame.cpp" bodystart="98" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1ac2116a988d27620b959a5c7ae50690ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataFrame::deleteMatrix</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Generic * &gt;&gt; *&amp;data)</argsstring>
        <name>deleteMatrix</name>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;&gt; *&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a pointer to a 2D vector and assigns nullptr to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="51" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a04a603fee1eb5ced35fb9a2b66a73c5e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
        <definition>DataFrame * DataFrame::filterGreaterThan</definition>
        <argsstring>(int col, Generic *min, bool inclusive) const</argsstring>
        <name>filterGreaterThan</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inclusive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new DataFrame* containing all rows where the stored Generic* at the specified column is greater than the passed-in Generic*. Passing in true for inclusive will store all rows with a greater than or equal value in the returned DataFrame*. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="59" column="15" bodyfile="DataFrame.cpp" bodystart="316" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a5e4d85ed927a46c252b337cb09fabedd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
        <definition>DataFrame * DataFrame::filterLessthan</definition>
        <argsstring>(int col, Generic *max, bool inclusive) const</argsstring>
        <name>filterLessthan</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inclusive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new DataFrame* containing all rows where the stored Generic* at the specified column is less than the passed-in Generic*. Passing in true for inclusive will store all rows with a less than or equal value in the returned DataFrame*. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="67" column="15" bodyfile="DataFrame.cpp" bodystart="331" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a26d32de2655a4f0ccb7154af1f6d957b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
        <definition>DataFrame * DataFrame::filterEquals</definition>
        <argsstring>(int col, Generic *value, bool equals=true) const</argsstring>
        <name>filterEquals</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>equals</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new DataFrame* containing all rows where the stored Generic* at the specified column is equal to the passed-in Generic*. Passing false will filter Generic* values not equal into the returned DataFrame*. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="74" column="15" bodyfile="DataFrame.cpp" bodystart="346" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1aff4eda862c51dba3b2a1caf8d3a34549" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
        <definition>Generic * DataFrame::parseCondition</definition>
        <argsstring>(int &amp;colIndex, std::string dataToCheck, int operatorIndex, std::string condition, bool inclusive) const</argsstring>
        <name>parseCondition</name>
        <param>
          <type>int &amp;</type>
          <declname>colIndex</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>dataToCheck</declname>
        </param>
        <param>
          <type>int</type>
          <declname>operatorIndex</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inclusive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper for the public filter method. Finds the index of the column specified by name in the original condition and assigns it to colIndex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="80" column="13" bodyfile="DataFrame.cpp" bodystart="280" bodyend="313"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_data_frame_1a69a9dc47b7506b8062fd34aedacbf579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataFrame::DataFrame</definition>
        <argsstring>()</argsstring>
        <name>DataFrame</name>
        <briefdescription>
<para>Constructs and empty <ref refid="class_data_frame" kindref="compound">DataFrame</ref> with no column names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="93" column="5" bodyfile="DataFrame.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a7c496a98d37bd4f31f7e2f9b10620d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataFrame::DataFrame</definition>
        <argsstring>(std::vector&lt; std::string &gt; colNames)</argsstring>
        <name>DataFrame</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>colNames</declname>
        </param>
        <briefdescription>
<para>Constructs an empty <ref refid="class_data_frame" kindref="compound">DataFrame</ref> with the specified column names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colNames</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector containing the names of the <ref refid="class_data_frame" kindref="compound">DataFrame</ref>&apos;s columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="100" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a6374c082b9e08b06f54bb88c2816e832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataFrame::DataFrame</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>DataFrame</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="class_data_frame" kindref="compound">DataFrame</ref> from a file. The format must be a comma separated list, with each row corresponding to a data entry, or <ref refid="class_data_frame" kindref="compound">DataFrame</ref> row. The first row contains the column names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>assumes proper file format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1ae5a6d2433e452dd6ef4bb416c30d0e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataFrame::DataFrame</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Generic * &gt;&gt; *data)</argsstring>
        <name>DataFrame</name>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;&gt; *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="class_data_frame" kindref="compound">DataFrame</ref> with no column names containing the passed-in data in a 2D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_data_frame" kindref="compound">DataFrame</ref> data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if passed a nullptr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="119" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1ad5ef91c537539c5b39dded6723e747e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataFrame::sort</definition>
        <argsstring>(int sortindex)</argsstring>
        <name>sort</name>
        <param>
          <type>int</type>
          <declname>sortindex</declname>
        </param>
        <briefdescription>
<para>Sorts this <ref refid="class_data_frame" kindref="compound">DataFrame</ref> on the specified column index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sortindex</parametername>
</parameternamelist>
<parameterdescription>
<para>the column index to sort on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the passed-in column is negative or greater than the maximum column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="128" column="10" bodyfile="DataFrame.cpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a8f2b84aac6eb64b519d4ba980e55adac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
        <definition>DataFrame * DataFrame::slice</definition>
        <argsstring>(int startIndex, int endIndex) const</argsstring>
        <name>slice</name>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endIndex</declname>
        </param>
        <briefdescription>
<para>Returns a new DataFrame* containing all rows of this <ref refid="class_data_frame" kindref="compound">DataFrame</ref>, from the start index to end index, exclusive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the ending row index, exclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataFrame* containing the specified rows of this <ref refid="class_data_frame" kindref="compound">DataFrame</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if start index is greater than end index, or either index is negative or greater than maximum row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="140" column="15" bodyfile="DataFrame.cpp" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a9a8fe147711bd6b95337677d25f8e429" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
        <definition>DataFrame * DataFrame::filter</definition>
        <argsstring>(std::string condition) const</argsstring>
        <name>filter</name>
        <param>
          <type>std::string</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
<para>Returns a new DataFrame* containing all rows where the specified condition is met. The format is &quot;COLUMN_NAME &lt; VALUE&quot;, where &lt; can be any comparator operator (&lt;, &lt;=, &gt;, &gt;=, ==, !=). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition to filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataFrame* a new <ref refid="class_data_frame" kindref="compound">DataFrame</ref> containing the filtered rows </para>
</simplesect>
<simplesect kind="pre"><para>assumes the passed in condition has a valid operator, valid column name, and valid condition of the same type (double, string, etc) as the Generic* values stored in the <ref refid="class_data_frame" kindref="compound">DataFrame</ref>&apos;s column </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>domain_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the <ref refid="class_data_frame" kindref="compound">DataFrame</ref> is empty </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if an invalid condition is given </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="155" column="15" bodyfile="DataFrame.cpp" bodystart="220" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a354aa4562f15654a670a577229437cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataFrame::appendRow</definition>
        <argsstring>(std::vector&lt; Generic * &gt; row)</argsstring>
        <name>appendRow</name>
        <param>
          <type>std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Appends a row to the <ref refid="class_data_frame" kindref="compound">DataFrame</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to append as a row to the <ref refid="class_data_frame" kindref="compound">DataFrame</ref> data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>assumes the passed-in row contains the same columns as this <ref refid="class_data_frame" kindref="compound">DataFrame</ref>, and contains valid data </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the column count for this <ref refid="class_data_frame" kindref="compound">DataFrame</ref> and the the row to append are not the same </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="166" column="10" bodyfile="DataFrame.cpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1acc0cd13c06311cbc5791c2096def5521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataFrame::appendRows</definition>
        <argsstring>(DataFrame *other)</argsstring>
        <name>appendRows</name>
        <param>
          <type><ref refid="class_data_frame" kindref="compound">DataFrame</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Appends all rows of the passed-in DataFrame* to the end of this <ref refid="class_data_frame" kindref="compound">DataFrame</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_data_frame" kindref="compound">DataFrame</ref> to append to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if passed a nullptr or the DataFrames do not contain the same number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="176" column="10" bodyfile="DataFrame.cpp" bodystart="144" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a1812706a2c39333650f460293c78151f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DataFrame::set</definition>
        <argsstring>(Generic *generic, int row, int col)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
          <declname>generic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the value at the passed-in row and column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>generic</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row to set the value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column to set the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>assumes the passed-in value is the same type as all other values in the <ref refid="class_data_frame" kindref="compound">DataFrame</ref>&apos;s column </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the row or column is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="188" column="10" bodyfile="DataFrame.cpp" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a33ded23b6ee55488aa1f7f012a133b5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_generic" kindref="compound">Generic</ref> *</type>
        <definition>Generic * DataFrame::get</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the value at the passed-in row and column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Generic* the value at the passed-in row and column </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the row or column is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="198" column="13" bodyfile="DataFrame.cpp" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a9496a8c4ea99bcd31782e7104bdfb19e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="struct_generic" kindref="compound">Generic</ref> * &gt;</type>
        <definition>vector&lt; Generic * &gt; DataFrame::getRow</definition>
        <argsstring>(int row) const</argsstring>
        <name>getRow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns row at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;Generic*&gt; the row </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the row is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="207" column="17" bodyfile="DataFrame.cpp" bodystart="169" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a48671d2f0fa73075cee90ea452037548" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string DataFrame::getColName</definition>
        <argsstring>(int colIndex) const</argsstring>
        <name>getColName</name>
        <param>
          <type>int</type>
          <declname>colIndex</declname>
        </param>
        <briefdescription>
<para>Returns the column name at the specified column index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the column&apos;s name </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>domain_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if no column names are stored for this <ref refid="class_data_frame" kindref="compound">DataFrame</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the column index is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="217" column="17" bodyfile="DataFrame.cpp" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a3dbf592f17efce18a49f99c36fb94f09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; DataFrame::getColNames</definition>
        <argsstring>() const</argsstring>
        <name>getColNames</name>
        <briefdescription>
<para>Returns a vector containing all column names. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::string&gt; the column names </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="224" column="17" bodyfile="DataFrame.cpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a595964bbcc2dfad458da5575282541bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GenericType</type>
        <definition>GenericType DataFrame::getColType</definition>
        <argsstring>(int colIndex) const</argsstring>
        <name>getColType</name>
        <param>
          <type>int</type>
          <declname>colIndex</declname>
        </param>
        <briefdescription>
<para>Returns the GenericType of data on the specified column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>the column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GenericType the type stored at the column </para>
</simplesect>
<simplesect kind="pre"><para>assumes the entire column stores the same data type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>range_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if <ref refid="class_data_frame" kindref="compound">DataFrame</ref> is empty </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if column index is out of bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="235" column="17" bodyfile="DataFrame.cpp" bodystart="200" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a8df1e3be23793ccc53540a9280921160" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; GenericType &gt;</type>
        <definition>vector&lt; GenericType &gt; DataFrame::getColTypes</definition>
        <argsstring>() const</argsstring>
        <name>getColTypes</name>
        <briefdescription>
<para>Returns a vector containing the GenericType of data in each column. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;GenericType&gt; the column types </para>
</simplesect>
<simplesect kind="pre"><para>assumes each column of the <ref refid="class_data_frame" kindref="compound">DataFrame</ref> contains data of a single type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>range_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if <ref refid="class_data_frame" kindref="compound">DataFrame</ref> is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="244" column="17" bodyfile="DataFrame.cpp" bodystart="189" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a94e911e4e9bae2a33bd60cb94533682a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DataFrame::rows</definition>
        <argsstring>() const</argsstring>
        <name>rows</name>
        <briefdescription>
<para>Counts the number of rows of this <ref refid="class_data_frame" kindref="compound">DataFrame</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int the row count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="251" column="9" bodyfile="DataFrame.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1a44f9cedce4a7aff87a7afe842e82d022" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DataFrame::cols</definition>
        <argsstring>() const</argsstring>
        <name>cols</name>
        <briefdescription>
<para>Counts the number of columns of this <ref refid="class_data_frame" kindref="compound">DataFrame</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int the column count </para>
</simplesect>
<simplesect kind="pre"><para>assumes every row contains the same number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="259" column="9" bodyfile="DataFrame.cpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1af290fe8f0aa424b715d12f03bcc088e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double DataFrame::average</definition>
        <argsstring>(int col) const</argsstring>
        <name>average</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the average of all values in the specified row. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double the average </para>
</simplesect>
<simplesect kind="pre"><para>the column must contain numeric data </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>domain_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if <ref refid="class_data_frame" kindref="compound">DataFrame</ref> is empty </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if column index is out of bounds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the column does not contain double values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="271" column="12" bodyfile="DataFrame.cpp" bodystart="359" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="class_data_frame_1ae8baea1e0005895e8b18870befe21112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataFrame::~DataFrame</definition>
        <argsstring>()</argsstring>
        <name>~DataFrame</name>
        <briefdescription>
<para>Destructor, deletes the outer vector of <ref refid="class_data_frame" kindref="compound">DataFrame</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DataFrame.h" line="277" column="5" bodyfile="DataFrame.cpp" bodystart="216" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_data_frame" kindref="compound">DataFrame</ref> is a matrix where each row corresponds to a data entry and each column of that row representing a characteristic of that data entry. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="DataFrame.h" line="28" column="1" bodyfile="DataFrame.h" bodystart="28" bodyend="278"/>
    <listofallmembers>
      <member refid="class_data_frame_1a354aa4562f15654a670a577229437cce" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>appendRow</name></member>
      <member refid="class_data_frame_1acc0cd13c06311cbc5791c2096def5521" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>appendRows</name></member>
      <member refid="class_data_frame_1af290fe8f0aa424b715d12f03bcc088e3" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>average</name></member>
      <member refid="class_data_frame_1aca57cc5b8e9f83e4bc6b1ae7deede52c" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>colNames</name></member>
      <member refid="class_data_frame_1a44f9cedce4a7aff87a7afe842e82d022" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>cols</name></member>
      <member refid="class_data_frame_1ab12a5cbcd9cb0fc2d9b1de9eb5bc56a5" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>data</name></member>
      <member refid="class_data_frame_1a69a9dc47b7506b8062fd34aedacbf579" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>DataFrame</name></member>
      <member refid="class_data_frame_1a7c496a98d37bd4f31f7e2f9b10620d4b" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>DataFrame</name></member>
      <member refid="class_data_frame_1a6374c082b9e08b06f54bb88c2816e832" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>DataFrame</name></member>
      <member refid="class_data_frame_1ae5a6d2433e452dd6ef4bb416c30d0e17" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>DataFrame</name></member>
      <member refid="class_data_frame_1ac2116a988d27620b959a5c7ae50690ab" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>deleteMatrix</name></member>
      <member refid="class_data_frame_1a9a8fe147711bd6b95337677d25f8e429" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>filter</name></member>
      <member refid="class_data_frame_1a26d32de2655a4f0ccb7154af1f6d957b" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>filterEquals</name></member>
      <member refid="class_data_frame_1a04a603fee1eb5ced35fb9a2b66a73c5e" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>filterGreaterThan</name></member>
      <member refid="class_data_frame_1a5e4d85ed927a46c252b337cb09fabedd" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>filterLessthan</name></member>
      <member refid="class_data_frame_1a33ded23b6ee55488aa1f7f012a133b5d" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>get</name></member>
      <member refid="class_data_frame_1a48671d2f0fa73075cee90ea452037548" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>getColName</name></member>
      <member refid="class_data_frame_1a3dbf592f17efce18a49f99c36fb94f09" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>getColNames</name></member>
      <member refid="class_data_frame_1a595964bbcc2dfad458da5575282541bb" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>getColType</name></member>
      <member refid="class_data_frame_1a8df1e3be23793ccc53540a9280921160" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>getColTypes</name></member>
      <member refid="class_data_frame_1a9496a8c4ea99bcd31782e7104bdfb19e" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>getRow</name></member>
      <member refid="class_data_frame_1aff4eda862c51dba3b2a1caf8d3a34549" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>parseCondition</name></member>
      <member refid="class_data_frame_1a94e911e4e9bae2a33bd60cb94533682a" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>rows</name></member>
      <member refid="class_data_frame_1a1812706a2c39333650f460293c78151f" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>set</name></member>
      <member refid="class_data_frame_1a8f2b84aac6eb64b519d4ba980e55adac" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>slice</name></member>
      <member refid="class_data_frame_1ad5ef91c537539c5b39dded6723e747e4" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>sort</name></member>
      <member refid="class_data_frame_1a50c5d1113c6a901c3c7cbb5b2f1cd910" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>sortMerge</name></member>
      <member refid="class_data_frame_1a51d102ded3fb1cfbe9167d757c519252" prot="private" virt="non-virtual"><scope>DataFrame</scope><name>sortSplit</name></member>
      <member refid="class_data_frame_1ae8baea1e0005895e8b18870befe21112" prot="public" virt="non-virtual"><scope>DataFrame</scope><name>~DataFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
